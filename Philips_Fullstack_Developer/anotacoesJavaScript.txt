Sintaxe Básica em JavaScript

O que é o JS?
O Javascript é uma linguagem de programaçã de alto nivel que integra o 
desenvolviment de apps e páginas da Web. è uma das linguagens de 
programação mais usadas no mundo do desenvolvimento.

Para que serve?
Para criar scripts dinamicos que realizam a interação de apps ou paginas 
da web. Imagine um prédio....O html é a estrutura, o prédio em si. 
O css é o design deste predio, eo JS é o encanamento, a fiação eletrica.

para saber mais:
Glossário - developer.mozilla.org/pt-BR/docs/Glossary/javascript
repositório do curso - github.com/DianaMartine/curso-dio-sintaxe-basica-javascript

==================================================================================

Variaveis
As variaveis em Javascript podem guardar tipos que chamamos de tipos primitivos.
Boolean= Verdadeiro ou falso
Null= nulos
Undefined= indefinidos
Number= numeros
String= caracteres
empty = vazio

Existem 3 modos de declarar as variaveis em JS
var - escopo global e local, pode ter seu valor alterado, se não tiver um valor
inicial sera tratada como null;

let- escopo local de bloco, pode ter seu valor alterado, se não tiver um valor 
inicial será tratada como null;

const - escopo local de bloco, somente leitura, o valor inicial é obrigatorio e 
não pode ser alterado.
O escopo em JS define a limitação e visibilidade de um bloco de codigo.

Escopo global: quando a variavel é declarada fora de qualquer bloco, sua visibilidade 
fica disponivel em todo o codigo.
Escopo local: quando a variavel é declarada dentro de um bloco, sua visibilidade pode 
ficar disponivel ou não.

Regras de uso de variaveis:
Iniciar com letras, _, $; não iniciar com numero.
Não usar espaços
Não usar palavras reservadas
Declarar variaveis no topo do bloco de codigo.

Case Type			Example
Original Variable as String     some awesome var
Camel Case			someAwesomeVar
Snake Case			some_awesome_var
Kebab Case			some-awesome-var
Pascal Case			SomeAwesomeVar
Upper Case Snake Case		SOME_AWESOME_VAR

Quando eu tiver uma variavel e quiser saber de qual tipo é, basta digitar no 
console: typeof nomedavariavel

Atribuição
O sinal = em JS significa atribuição

Comparação
para fazer uma comparação usamos ==
sempre ira retornar verdadeiro ou falso

Comparação identica
Verifica se o valo e o tipo são iguais usa-se ===

Operadores logicos:
&& - "e" - considera que todos os valores sejam true(verdadeiro);
|| - "ou" -considera que qualquer valor seja True;
! - "não" - inverte o valor true para false ou vice-versa;
=================================================================================

Vetores ou arrays
Arrays são um tipo de lista, ou matriz de variáveis, onde cada
variável possui um índice. Os valores podem ser de vários tipos.
Imagina que um array é uma caixa com várias outras caixas dentro
e cada uma contendo algum valor;
Ex.: let array = [‘string’, 1, true...]

Array
O array deve ser declarado entre colchetes “[]”, e podem guardar
qualquer valor dentro de seus índices: inclusive outros arrays.
Ex.: let array = ['string', 1, true, false, [‘array1], [‘array2’]...]
Obs.: O índice só é acessado por um número inteiro, onde 0 é o
primeiro índice. Cada índice é separado por vírgula.

Manipulando Arrays
Ao ser declarado, o Array traz consigo uma série de métodos para
manipulá-lo.
• forEach() – itera um array;
• push() – add item no final do array;
• pop() – remove item no final do array;
• shift() – remove item no início do array;
• unshift() – add item no início do array;
• indexOf() – retorna o índice de um valor;
• splice() – remove ou substitui um item pelo índice;
• slice() – retorna uma parte de um array existente.
---------------------------------------------------------------------------
Spread: Uma forma de liadr separadamente com elementos.

function sum(x, y, z) {
  return x+y+z;
}
const numbers = [1,2, 3];
console.log(sum(...numbers));

Oque era parte de uma array se torna um numero independente.
----------------------------------------------------------------------------
===============================================================================

Objetos
Dados que possuem propriedades e valores que definem suas
características. Deve ser declarado entre chaves “{}”.
Ex.: imagine uma xícara azul. Ela tem cor, pode ter vários
tamanhos e funções(quero cafééé). Pode ser declarada assim:
var xicara = {
cor: ‘azul’,
tamanho: ‘p’,
funcao: tomarCafe()
}

Manipulando objetos
As propriedades de ojbetos podem ser atribuídas à variáveis,
facilitando a manipulação do objeto. Chamamos isso de
desestruturação.
Ex.: var xicara = {cor: ‘azul’, tamanho: ‘p’, funcao: tomarCafe()}
var cor = xicara.cor;
var tamanho = xicara.tamanho;
var funcao = tomarCafe();

Outra forma de fazer a desestruturação é utilizando chaves ao
declarar a variável:
Ex.: var xicara = {cor: ‘azul’, tamanho: ‘p’, funcao: tomarCafe()}
var { cor, tamanho, funcao } = xicara;

Para saber mais:
Arrays –
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Refere
nce/Global_Objects/Array
Objetos –
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/
Working_with_Objects
Desestruturação –
https://www.digitalocean.com/community/tutorials/understanding-destructuring-
rest-parameters-and-spread-syntax-in-javascript-pt

==============================================================================

Estruturas condicionais
São instruções para realizar determinadas tarefas a partir de uma
condição, seja de decisão ou repetição;
Ex.: Um jogo precisa mudar o placar toda vez que um jogador
marca pontuação;

if
Podemos usar as palavras reservadas “if” para estabelecer uma
condição:
Ex.: var jogador1 = 0;
var jogador2 = 0;
if (jogador1 > 0) {
console.log(‘jogador1 marcou ponto’);
}
// como ler: se o jogador1 tiver valor maior que 0
ele marcou ponto.

else
No caso de a condição não ser atendida podemos usar o “else” :
Ex.: var jogador1 = 1;
var jogador2 = 0;
if (jogador1 > 0) {
console.log(‘jogador1 marcou ponto’);
} else {
console.log(‘ninguem marcou ponto’);
}

else if
Caso haja mais de uma condição usamos o “else if“.
Ex.: var jogador1 = 1;
var jogador2 = 0;
if (jogador1 > 0) {
console.log(‘jogador1 marcou ponto’);
} else if (jogador2 > 0) {
console.log(‘jogador2 marcou ponto’);
} else {
console.log(‘ninguém marcou ponto);
}

ninho de if
Podemos também usar o “if” dentro de um outro “if”, chamamos
isso de aninhamento de if’s ou ninho de if’s.
Ex.: if (jogador1 = -1) {
if (jogador1 > 0) {
console.log(‘jogador 1 marcou ponto’);
} else {
console.log(‘ninguém marcou ponto’);
}
} else {
console.log(‘jogador inválido’);
}

If ternário
Podemos também fazer uma verificação em uma única linha
usando o “if” ternário:
Ex.: [condição] ? [instrução1] : [instrução2];
jogador1 > 0 ? console.log(‘marcou ponto’) : console.log(‘não
marcou ponto”);
// lembre de usar a interrogação “?” e dois pontos “:”

Usando switch/case
O “switch/case” funciona como uma estrutura condicional
também;
Ex.: switch (${expressao}) {
case 1:
${instrucao};
break;
case 2:
${instrução};
break;
}

Laços de repetição
São estruturas condicionais que repetem uma instrução até atingir
determinada condição:
• For;
• For/in;
• For/of;
• While;
• Do/while;

For
Funciona como uma repetição de instrução até que a condição
seja falsa:
for ([expressaoInicial]; [condicao]; [incremento]) {
declaracao }
Ex.: var array = [‘valor1’, ‘valor2’, ‘valor3’, ‘valor4’]
for (let i = 0; i < array.length; i++) {
console.log(i);
}

For/in
Funciona como uma repetição a partir de uma propriedade:
for ([indice] in [objeto ou array]) {
declaracao }
Ex.: var array = [‘valor1’, ‘valor2’, ‘valor3’, ‘valor4’]
for (i in array) {
console.log(i);
}

For/of
Funciona como uma repetição a partir de um valor:
for ([indice] of [array]) {
declaracao }
Ex.: var array = [‘valor1’, ‘valor2’, ‘valor3’, ‘valor4’]
for (i of array) {
console.log(i);
}

For/of
O For/of não funciona com objetos pois as propriedades variam,
diferentes do índice em um array que sempre serão números
inteiros.
Mas e se eu quiser pegar o valor mesmo assim?
Ex.: for (i of object.propriedade) {
console.log(i);
}
// porém cada caractere dentro do valor será
Impresso em linhas separadas.

While
Executa uma instrução “enquanto” determinada condição for
verdadeira, a verificação é feita antes da execução;
Ex.: var a = 0;
while (a < 10) {
a++;
console.log(a);
}
// como ler: enquanto a variável a for menor que 10 ela
vai receber mais um e imprimir no console.

Do/while
Executa uma instrução “até que” determinada condição seja falsa,
a verificação é feita depois da execução;
Ex.: var a = 0;
do {
a++;
console.log(a);
} while (a < 10)
// como ler: a variável a vai receber mais um e imprimir
no console até que seu valor chegue a 10

--------------------------------------------------------------------------------
This: O que é?
A palavra reservada This é uma referencia de contexto.
No exemplo. this refere-se ao objeto pessoa.

const pessoa = {
   firstName: "Andre",
   LastName : "Soares",
   id       : 1,
   fullName : function() {
     return this.firstName + "" + this.lastName;
},
getId: function() {
  return this.id;
}
};

pessoa.fullName();
//"Andre Soares"
pessoa.getId();
// 1

manipulando o valor de This
Call / Apply (é possivel passar parmetros para essa função(apply) dentro de um array.
exemplo:

     const pessoa = {
       nome: 'Miguel',
     };
     const animal = {
       nome: 'Murphy',
     };
     function getSomething() {
       console.log(this,nome);
     }
     getSomething.call(pessoa);

$node playground.js
Miguel

     getSomething.call(animal);
$node playground.js
Murphy

Bind
Clona a estrutura da função onde é chamada e aplica o valor do objeto passado como parametro.
exemplo:
  const retornaNomes = function () {
     return this.nome;
  };
  let bruno = retornaNomes.bind({ nome: 'Bruno" };
  bruno()
// Bruno
--------------------------------------------------------------------------------------------
ARROW FUNCTIONS
=>
Exemplo sem arrow function 
  const helloWord = function() {
    return Hello World";
  }
Exemplo com arrow function
   const helloWorld = () => {
     return "Hello World";
   }

ou ainda
const helloWorld = () => "Hello World"

- Caso exista apenas uma linha pode dispensar as chaves e o return.
- Caso exista apenas um parametro, pode dispensar os parenteses.

Exemplos: 
  const soma = (a, b) => a+b;
  soma (4, 6);
//10

const soma = a => a;
soma(4);
// 4
Arrow function não faz hoisting!
Outras restrições:
- "this" sempre será o objeto global. Métodos para modifiar seu valor não irão funcionar;
- Não existe o objeto "arguments";
- O construtur (ex: new Meu Objeto()) tambem não pode ser utilizado.
Para saber mais:
Estruturas condicionais –
https://developer.mozilla.org/pt-BR/docs/Learn/JavaScript/Buildi
ng_blocks/conditionals
Laços de repetição –
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration

=================================================================================

Funções
São blocos de comandos e instruções para a execução de
determinadas tarefas:
Ex.: function nomeDaFuncao() {
${instrucao};
}
nomeDaFuncao();


Como declarar?
Geralmente se utiliza a palavra reservada “function” seguida de
parênteses “()” e chaves “{}”:
Ex.: function funcao() {
console.log(“mensagem”);
}
funcao();
() – indica que é um objeto do tipo function;
{} – indica que é um bloco de instrução;

Variaveis criadas dentro de uma função apenas podem ser usadas detro dela.

Funções com parâmetros
As funções podem receber em sua declaração, parâmetros, que
servem como variáveis, onde sua atribuição pode ser feita durante
a chamada da função:
Ex.: function nomeDaFuncao(parametro) {
${instrucao};
}
nomeDaFuncao(valorDoParametro);


Funções com parâmetros
Ex.: function mensagem(primeiro, segundo) {
console.log(primeiro, segundo);
}
nomeDaFuncao(“Tudo certo”, “jovem!”);
---------------------------------------------------------------------------
Função Anonima
Uma variavel pode armazenar uma função

cont soma = function (a,b) {
  return a+b;
}
soma(1,2) //3
soma(5,4) //9
----------------------------------------------------------------------------
Função autoinvocavel
Uma função anonima entre parenteses, seguida por outro par de parenteses, que
representa sua chamada.
(
   function() {
     let name = "Digital Inovation One"
     return name;
}
)(),
//Digital Inovation One

Tambem pode ser utilizada com parametros ou armazenada em uma variavel.

(
   function (a, b) {
     return a + b;
   }
)(1,2);
//3
              -----------------------------------
const soma3 = (
  function() {
    return a + b;
  }
)(1, 2);

console.log(soma3)//3
-----------------------------------------------------------------------------
Callbacks: Uma função passada como argumento para outra.
Uilizando callbacks, voce tem maior controle da orde de chamadas.

const calc = function(operacao, num1, num2){
  return opercao(num1, num2);
}
const soma = function(num1, num2) {
  return num1 + num2;
}
const sub = function(num1, num2) {
  return num1 - num2;
}
const resultSoma = calc(soma, 1, 2);
const resultSub = calc(sub, 1, 2);

console.log(resultSub); //-1
console.log(resultSoma);//3
------------------------------------------------------------------------------

Para saber mais:
Funções –
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/
Functions

================================================================================

Funções declarativas
São funções que possuem o uso mais comum, deve ser declarada
usando a palavra reservada “function” seguida do nome da
função, parênteses “()” e chaves “{}”:
Ex.: function nomeDaFuncao() {
${instrucao};
}
// o nome da função é obrigatório;


Expressões de Funções
São funções atribuídas à expressões. A nomeação das funções por
expressão é opcional:
Ex. 1: var funcao = function nomeDaFuncao() {
${instrucao};
}
Ex. 2: var funcao = function() {
${instrucao};
};


Arrow Function
São funções de expressão de sintaxe curta. Arrow functions
sempre serão anônimas, e portanto não podem ser nomeadas.
deve ser declarada com parênteses "()", seguido de "=>" e depois
chaves "{}"
Ex. 1: var funcao = () => {
${instrucao};
}


Criando uma calculadora
Para este exercício vamos utilizar alguns métodos nativos do
JavaScript:
• Number() – para converter valores em números;
• Prompt() – para registrar entradas de usuário;
• Alert() – para mostrar mensagem ao usuário;
• Template Strings – para usar strings junto com expressões;


Para saber mais:
Funções –
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/
Functions
Number –
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Refere
nce/Global_Objects/Number
Window.prompt –
https://developer.mozilla.org/pt-BR/docs/Web/API/Window/prompt
Window.alert –
https://developer.mozilla.org/pt-BR/docs/Web/API/Window/alert
Template String -
https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Refere
nce/Template_literals

==================================================================================
TRABALHANDO COM MODULOS
Módulos sao arquivos Javascript qu tem a capacidade de exportar e
importar informações de outros arquivos do mesmo tipo.
Algumas vantagens são:
- Organização do código;
- Compartihamento de variaveis emescopos diferentes;
- Explicita as dependencias dos arquivos.

Exportar:
export function mostraIdade(pessoa) {
return `A idade de ${pessoa.nome} é ${pessoa.idade}`;
} ou
function mostraIdade(pessoa) {
return `A idade de ${pessoa.nome} é ${pessoa.idade}`;
export {
  mostraNome
  mostraIdade}

Importar:
import {funcao, variavel, classe} from './arquivo.js'
ou
import valorDefault from './arquivo.js'

Vinculando ao HTML
<script type="module" src="./main.js"></script>
Para fazer testes localmente (de um arquivo de seu computador), será necessário 
estar rodando um servidor. Isso pode ser feito utilizando a extensão live server 
do VScode.
--------------------------------------------------------------------------------

MAP
const myMap =nw Map()
myMap.set(vai adicionar)
myMap.get(vai ler)
myMap.delete (vai delatar)

MAP Vs OBJETO

- Maps podem ter chaves de qualquer tipo;
- Maps possuem a propriedade lenght;
- Maps são mais fáceis de iterar;
- Utilizado quando o valor das chaves é desconhecido;
- O svalores tem o mesmo tipo. 
----------------------------------------------------------------------------
SET
Sets são estruturas  que armazenam apenas valores unicos.

const mySet = new Set();

mySet.add (vai adicionar)
mySet.has (vai consultar)
mySet.delete( vai deletar)

SET Vs ARRAY

-Possui valores unicos;
- Em vez da propriedade lenght, consulta-se o ´umero de  registros pela 
propriedade size;
- Não possui os metodos map, filter reduce, etc.

==============================================================================
 Error do ECMAScript e DOMException

ECMAScript são erros que ocorrem em tempo de execução.
composto por:
-Mensagem
-Nome
-Linha
-Call Stack

DOMException são erros rlacionados a parte do codigo que esta rodando 
naquele momento na pagina da web

TRATAMENTO DE ERROS
Throw
Se colocado no lugar de return irá retornar por exemplo ao inves de
"String Invalida", "String invalida" e todas as especificacoes do erro

Try...catch
captura e trata o erro

CRIANDO ERROS PERSONALIZADOS
O objeto error
Código:

new Error(message, fileName, lineNumber)
// todos os parametros são opcionais
const MeuErro = new Error('Mensagem invalida');
throw MeuErro;

const MeuErro = new Error('Mensagem Invalida');
MeuErro.name = 'InvalidMessage';
throw MeuErro;
============================================================================
Orientação a objetos
Paradigmas
imperativos:			Declarativos
Procedural			Logica
Orientação a objetos		Funcional
processos paralelos		Data base

Os programas são "objetos" que possuem uma série de propriedades.
Pilares:
- Herança: O objeto herda propriedades e metodos do objeto pai.

- Polimorfismo: Objetos podem herdare a mesma classe pai, mas se comportarem
de forma diferente quando invocamos seus métodos.

- Encapsulamento: Cada classe tem propriedades  métodos independentes do 
restante do código.

- Abstração: "Prcesso mental que consiste em isolar um aspecto determinado 
de um estado de coisas relativamente complexo,a fi de simplficar a sua 
avaliação, classificação o para permitir a comunicação do mesmo" 
----------------------------------------------------------------------
Protótipos
Todos os objetos Javascript herdam propriedades e métodos de um prototype
(protótipo). O onjeto Object prototype está no topo desta cadeia.

Classes 
Syntatic sugar: uma siontaxe feita para facilitar a escrita. Na realidae 
não existe no Javascript classes.
Javascript não possui classes nativamente. Todas as classes são objetos e a
herança se dá por protótipos.
=============================================================================
Assincrono
"Que não ocorre ao mesmo tempo."

Promisses
Objeto de processamento assincrono.
Inicialmente, seu valor é desconhecido.Ela pode, entao, ser resolvida ou 
rejeitada.
Uma promisse pode ter 3 estados:
- Pending (pendente)
- Fulfilled (resolvido)
- Rejected (rejeitado)
Manipulação:

const myPromisse = new Promise((resolve, reject) => {
    window.setTimeout(() => {
        resolve('resolvida';
    }, 2000);
});

await myPromisse
        .then((result) => result + ' passando pelo then')
        .then((result) => result + 'e agora acabou!')
        .catch((err) => consle.log(err.message));

Async/await
Funções assincronas precisam destas duas palavras chave.

async function resolvePromise() {
  const myPromisse = new Promise((resolve, reject) => {
    window.setTimeout(() => {
        resolve('resolvida';
    }, 3000);
});

const resolved = await myPromisse
        .then((result) => result + ' passando pelo then')
        .then((result) => result + 'e agora acabou!')
        .catch((err) => consle.log(err.message));
  return resolved;
}
----------------------------------------------------------------------
O que são APIS
Application Programming Interface
Uma API é uma forma de intermediar os resultados do back-end com o que é
aprsentado no front-end
voce consegue acessa-la por meio de URLs.

JSON: JavaScript Object Notation
è muito comum que APIS retornem seus dados no formato .json, portanto
precisamos tratar esses dados quando os recebermos.

fetch

fetch(url, options)
   .then(response => response.json())
   .then(json => console.log(json))
//retorna uma promisse
Operações no banco (POST, GET, PUT, DELETE, etc.)
=============================================================================
Desafios de Código Iniciais Js 
esafio
Crie um programa que leia 6 valores, os quais poderão ser negativos e/ou 
positivos. Em seguida, apresente a quantidade de valores positivos digitados.

Entrada
Você receberá seis valores, negativos e/ou positivos.

Saída
Exiba uma mensagem dizendo quantos valores positivos foram lidos. 
assim como é exibido abaixo no exemplo de saída. Não se esqueça de incluir 
na mensagem de saída o sufixo " valores positivos"

resolução:

numero = Array(6);

numero[0] = gets();
numero[1] = gets();
numero[2] = gets();
numero[3] = gets();
numero[4] = gets();
numero[5] = gets();

positivos = numero.filter(value => value > 0);

console.log(positivos.length + " valores positivos");


Fases da Lua
Jade ganhou de presente de aniversário um telescópio e ficou muito feliz, 
pois adora olhar a lua à noite. Ela sempre foi uma estudante muito boa, e só 
analizando a lua por duas noites seguidas, já consegue identificar as mudanças
que ocorreram na iluminação e o percentual aproximado da lua que está 
iluminada.
Você, que é amigo da Jade e estuda Computação, resolveu fazer um pequeno 
programa que, baseado nesta avaliação que ela fez nas duas últimas noites, 
informa a fase na qual a lua se encontra. Se a porção visível da lua no 
momento estiver entre 0 e 2%, por exemplo, é lua nova, se for entre 3 e 96% 
é lua crescente, se for entre 97 e 100% é lua cheia e se for entre 96 e 3% 
(diminuindo) é lua minguante.
Entrada
A entrada é composta por uma única linha contendo dois valores inteiros. 
O primeiro valor corresponde ao percentual observado por Jade na noite de 
dois dias atrás. O segundo valor corresponde ao percentual observado por 
jade na noite anterior.

Saída
Baseado nos dois percentuais observados por Jade, imprima na tela a fase na 
qual a lua se encontrava na noite anterior, conforme o exemplo abaixo. 
Não esqueça de imprimir o caractere de fim de linha após a saída :).
Resolução:

let lines = gets().split('\n');

let line = lines.shift().split(" ");
let inicio = parseInt(line[0]);
let final = parseInt(line[1]);

if (inicio >= 0 && final <= 2) {
    print('nova');
} else if (final > inicio && final <= 96) {
    print('crescente');
} else if ( inicio >= final && final <= 96) {
    print('minguante');                 //complete o código nos espaços em branco
} else { 
    print('cheia');
}


Album da copa
Desafio
A Copa do Mundo de Futebol é um dos maiores eventos esportivos do Planeta 
Terra, e o álbum de figurinhas oficial é sempre um grande sucesso entre os 
amantes dessa competição. O álbum contém espaços numerados de 1 a N para 
colar as figurinhas; cada figurinha, também numerada de 1 a N, é uma pequena 
foto de um jogador de uma das seleções que jogará a Copa do Mundo. O objetivo 
é colar todas as figurinhas nos respectivos espaços no álbum, de modo a 
completar o álbum, ou seja, não deixar nenhum espaço sem a correspondente 
figurinha.
As figurinhas são vendidas em envelopes fechados, de forma que o comprador 
não sabe quais figurinhas está comprando, e pode ocorrer de comprar uma 
figurinha que ele já tenha colado no álbum.
Para ajudar os usuários, a empresa responsável pela venda do álbum e das 
figurinhas quer criar um aplicativo que permita gerenciar facilmente as 
figurinhas que faltam para completar o álbum e está solicitando a sua ajuda.
Dados o número total de espaços e figurinhas do álbum, e uma lista das 
figurinhas já compradas (que pode conter figurinhas repetidas), o seu desafio
é determinar quantas figurinhas faltam para completar o álbum.
Entrada
A primeira linha contém um inteiro N (1 ≤ N ≤ 100) indicando o número total 
de figurinhas e espaços no álbum. A segunda linha contém um inteiro 
M (1 ≤ M ≤ 300) indicando o número de figurinhas já compradas. Cada uma das M 
linhas seguintes contém um número inteiro X (1 ≤ X ≤ N) indicando uma 
figurinha já comprada.
Saída
Seu programa deve produzir uma única linha contendo um inteiro representando 
o número de figurinhas que falta para completar o álbum.
Resolução:

let N = parseInt(gets())
let M = parseInt(gets())
let album = [];

for (let i = 0; i < M; i++) {
  let fig = parseInt(gets())
  
  if (album.indexOf(fig) ===  -1) {
    album.push(fig);
  }
}

console.log(N - album.length)






 


